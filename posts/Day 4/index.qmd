---
title: "Day 4: Quantities "
author: "Vasantha M"
---

## Setting up:

> ### Overview:
>
> -   `gf_histogram()`
>
>     -   bins
>
> -   `gf_facet_wrap()`
>
>     -   scales
>
>     -   nrow
>
> -   `gf_themes()`
>
> -   `favestats()`
>
> -   `drop_na()`
>
> -   `crosstable()`
>
> -   `crosstable::as_flextable()`
>
> -   `arrange(desc())` or `arrange(asec())`
>
> -   f`ilter( df %in% c())`
>
> -   `slice_max()`
>
>     -   order_by
>
> -   `left_join()`

```{r}
#| label: setup
library(tidyverse)
library(mosaic)
library(ggformula)
library(skimr)
library(crosstable)
```

.

.

## Looking Dataset "diamonds":

.

> ### Notes:
>
> -   bins = the number of classes
>
>     -   the y-axis changes when you change the bins as more the number of class groups, less the number of units within that group \> count scale changes
>     -   if the number of bins = the number of rows, it would result in a line graph with the area shaded
>
> -   alpha = opacity, valuable for overlapping values
>
> -   gf_facet_wrap = splits the levels of a variable into their respective graphs
>
> -   nrow = changes the scale on the y axis
>
> -   free_y = changes the scales on each graph on gf_facet_wrap

.

```{r}
diamonds
```

.

```{r}
diamonds %>% glimpse()
```

.

```{r}
diamonds %>% inspect()
```

.

```{r}
diamonds %>% skim()
```

.

.

## Munging Data:

There's nothing to be munged!

.

.

## Q1: Price Distribution

.

```{r}
## Plotting the distribution of Diamond Prices
diamonds %>% 
  gf_histogram(~price) %>%
  gf_labs(
    title = "Plot 1A: Diamond Prices",
    caption = "bins=default=25"
  )
```

.

```{r}
##What happens when you change the bins?
diamonds %>% 
  gf_histogram(~price,
               bins =100) %>%
  gf_labs(
    title = "Plot 1B: Diamond Prices",
    caption = "bins=100"
  )
```

.

.

## Q2: Carat Distribution

.

```{r}
## Plotting the distribution of diamonds with different Carats
diamonds %>% 
  gf_histogram(~carat) %>%
  gf_labs(
    title = "Plot 2A: Diamond Carats",
    caption = "bins=default=25"
  )

```

```{r}
## Putting bins at 100
diamonds %>% 
  gf_histogram(~carat,
               bins = 100) %>%
  gf_labs(
    title = "Plot 2B: Diamond Carats",
    caption = "bins=100"
  )
```

```{r}
## Putting bins at 200
diamonds %>% 
  gf_histogram(~carat,
               bins = 200) %>%
  gf_labs(
    title = "Plot 2C: Diamond Carats",
    caption = "bins=200"
  )
```

.

```{r}
## What about when bins are 2000?
diamonds %>% 
  gf_plot(~carat,
               bins = 2000) %>%
  gf_labs(
    title = "Plot 2D: Diamond Carats",
    caption = "bins=2000"
  )
```

.

> ### Observations:
>
> -   Some towers are really high, and some are very low: this suggests that there are certain values of diamonds that are more standard than others, i.e, one is more likely to find 1, 1.5 and 2 carat diamonds than perhaps a 1.8 or 1.9 carat diamond.

## Q3: Price Distribution based on Cut, Clarity, Color

> can you stack and dodge in histograms?

```{r}
diamonds %>% 
  gf_histogram( ~price,
               fill = ~cut,
               color = "violet",
               alpha = 0.8) %>%
  gf_labs(
    title="Plot 3A: Price distribution based on Cut",
    caption="bins=default=25"
  )
  
  
```

```{r}
diamonds %>% 
  gf_histogram( ~price,
               fill = ~cut,
               position = "dodge",
               color = "violet",
               alpha = 0.8) %>%
  gf_labs(
    title="Plot 3B: Price distribution based on Cut",
    caption="bins = 25, position = dodge"
  )
```

```{r}
diamonds %>% 
  gf_histogram( ~price,
               fill = ~cut,
               position = "fill",
               color = "violet",
               alpha = 0.8) %>%
  gf_labs(
    title="Plot 3C: Price distribution based on Cut",
    caption="bins = 25, position = fill"
  )
```

> Position 'dodge' and 'stacked' act as default for gf_facet_wrap. Fill doesn't make any sense to do as all coloumns would be 1 and filled.

```{r}
diamonds %>% 
  gf_histogram( ~price,
               fill = ~cut,
               color = "violet",
               alpha = 0.8) %>%
  gf_facet_wrap(~cut) %>% 
  gf_labs(
    title="Plot 3B: Prices by Filled and Facetted by Cut",
    caption="bins = 25"
  )
```

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~cut, color = "violet", alpha = 0.3) %>%
  gf_facet_wrap(~cut, scales = "free_y", nrow = 2) %>%
  gf_labs(
    title = "Plot 3D: Prices Filled and Facetted by Cut",
    subtitle = "Free y-scale, nrow = 2",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x =
      element_text(
        angle = 45,
        hjust = 1
      )
  ))
```

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~cut, color = "violet", alpha = 0.3) %>%
  gf_facet_wrap(~cut, scales = "free_y", nrow = 5) %>%
  gf_labs(
    title = "Plot 3D: Prices Filled and Facetted by Cut",
    subtitle = "Free y-scale, nrow = 5",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x =
      element_text(
        angle = 45,
        hjust = 1
      )
  ))
```

.

.

## Looking at Data sets 'race' and 'rank':

.

> ### Notes:
>
> -   favestats = singles out specified row and gives its stats
>
> -   crosstables = tabling more than two variables against each other
>
> -   drop_na() = removes all missing variables

.

```{r}
## Reading race data frame
##
race_df <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv")
##
##reading rank data frame
##
rank_df <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv")


```

```{r}
race_df %>% glimpse()
```

```{r}
race_df %>%skim()
```

```{r}
rank_df %>%glimpse()
```

```{r}
rank_df %>%skim()
```

.

### Using mosaic::favestats:

```{r}
race_df %>%
  favstats(~distance, data = .)
```

```{r}

race_df %>%
  favstats(~participants, data = .)
```

```{r}
##
rank_df %>%
  drop_na() %>%
  favstats(time_in_seconds ~ gender, data = .)
```

.

.

### Data Dictionary:

## Coming up with Questions:

1.  Do gender and age affect time in seconds

## Q1:

## Q2:
