{
  "hash": "35963ba07d945fffa91cc69d4ca19d61",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 4: Quantities \"\nauthor: \"Vasantha M\"\n---\n\n\n\n## Setting up:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(crosstable)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n\n\n:::\n:::\n\n\n\n## Looking Dataset \"diamonds\":\n\n> ### Notes:\n>\n> -   bins = the number of classes\n>\n>     -   the y-axis changes when you change the bins as more the number of class groups, less the number of units within that group \\> count scale changes\n>     -   if the number of bins = the number of rows, it would result in a line graph with the area shaded\n>\n> -   alpha = opacity, valuable for overlapping values\n>\n> -   gf_facet_wrap = splits the levels of a variable into their respective graphs\n>\n> -   nrow = changes the scale on the y axis\n>\n> -   free_y = changes the scales on each graph on gf_facet_wrap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% inspect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |53940      |\n|Number of columns        |10         |\n|_______________________  |           |\n|Column type frequency:   |           |\n|factor                   |3          |\n|numeric                  |7          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                                    |\n|:-------------|---------:|-------------:|:-------|--------:|:---------------------------------------------|\n|cut           |         0|             1|TRUE    |        5|Ide: 21551, Pre: 13791, Ver: 12082, Goo: 4906 |\n|color         |         0|             1|TRUE    |        7|G: 11292, E: 9797, F: 9542, H: 8304           |\n|clarity       |         0|             1|TRUE    |        8|SI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171  |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|      sd|    p0|    p25|     p50|     p75|     p100|hist  |\n|:-------------|---------:|-------------:|-------:|-------:|-----:|------:|-------:|-------:|--------:|:-----|\n|carat         |         0|             1|    0.80|    0.47|   0.2|   0.40|    0.70|    1.04|     5.01|▇▂▁▁▁ |\n|depth         |         0|             1|   61.75|    1.43|  43.0|  61.00|   61.80|   62.50|    79.00|▁▁▇▁▁ |\n|table         |         0|             1|   57.46|    2.23|  43.0|  56.00|   57.00|   59.00|    95.00|▁▇▁▁▁ |\n|price         |         0|             1| 3932.80| 3989.44| 326.0| 950.00| 2401.00| 5324.25| 18823.00|▇▂▁▁▁ |\n|x             |         0|             1|    5.73|    1.12|   0.0|   4.71|    5.70|    6.54|    10.74|▁▁▇▃▁ |\n|y             |         0|             1|    5.73|    1.14|   0.0|   4.72|    5.71|    6.54|    58.90|▇▁▁▁▁ |\n|z             |         0|             1|    3.54|    0.71|   0.0|   2.91|    3.53|    4.04|    31.80|▇▁▁▁▁ |\n\n\n:::\n:::\n\n\n\n## Munging Data:\n\nThere's nothing to be munged!\n\n## Q1: Price Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram(~price) %>%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"bins=default=25\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram(~price,\n               bins =100) %>%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"bins=100\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Q2: Carat Distribution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram(~carat) %>%\n  gf_labs(\n    title = \"Plot 2A: Diamond Carats\",\n    caption = \"bins=default=25\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram(~carat,\n               bins = 100) %>%\n  gf_labs(\n    title = \"Plot 2B: Diamond Carats\",\n    caption = \"bins=100\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram(~carat,\n               bins = 2000) %>%\n  gf_labs(\n    title = \"Plot 2B: Diamond Carats\",\n    caption = \"bins=100\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Q3: Price Distribution based on Cut, Clarity, Color\n\n> can you stack and dodge in histograms?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram( ~price,\n               fill = ~cut,\n               color = \"violet\",\n               alpha = 0.8) %>%\n  gf_labs(\n    title=\"Plot 3A: Price distribution based on Cut\",\n    caption=\"bins=default=25\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram( ~price,\n               fill = ~cut,\n               position = \"dodge\",\n               color = \"violet\",\n               alpha = 0.8) %>%\n  gf_labs(\n    title=\"Plot 3B: Price distribution based on Cut\",\n    caption=\"bins = 25, position = dodge\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram( ~price,\n               fill = ~cut,\n               position = \"fill\",\n               color = \"violet\",\n               alpha = 0.8) %>%\n  gf_labs(\n    title=\"Plot 3C: Price distribution based on Cut\",\n    caption=\"bins = 25, position = fill\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n> Position 'dodge' and 'stacked' act as default for gf_facet_wrap. Fill doesn't make any sense to do as all coloumns would be 1 and filled.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  gf_histogram( ~price,\n               fill = ~cut,\n               color = \"violet\",\n               alpha = 0.8) %>%\n  gf_facet_wrap(~cut) %>% \n  gf_labs(\n    title=\"Plot 3B: Prices by Filled and Facetted by Cut\",\n    caption=\"bins = 25\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"violet\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %>%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale, nrow = 2\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"violet\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 5) %>%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale, nrow = 5\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Looking at Dataset 'race':\n\n> ## Notes:\n>\n> -   favestats\n>\n> -   crosstables\n>\n> -   drop_na() = removes all missing variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nrank_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nrace_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          <dbl> <chr>    <chr> <chr> <chr>   <date>     <time>     <chr>        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance <dbl>, elevation_gain <dbl>,\n#   elevation_loss <dbl>, aid_stations <dbl>, participants <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,207\nColumns: 13\n$ race_year_id   <dbl> 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          <chr> \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           <chr> \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           <chr> \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        <chr> \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           <date> 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     <time> 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  <chr> \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       <dbl> 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain <dbl> 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss <dbl> -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   <dbl> 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   <dbl> 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 137,803\nColumns: 8\n$ race_year_id    <dbl> 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          <chr> \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            <chr> \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             <dbl> 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          <chr> \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     <chr> \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds <dbl> 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |137803     |\n|Number of columns        |8          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |4          |\n|numeric                  |4          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|runner        |         0|          1.00|   3|  52|     0|    73629|          0|\n|time          |     17791|          0.87|   8|  11|     0|    72840|          0|\n|gender        |        30|          1.00|   1|   1|     0|        2|          0|\n|nationality   |         0|          1.00|   3|   3|     0|      133|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable   | n_missing| complete_rate|      mean|       sd|   p0|   p25|    p50|    p75|   p100|hist  |\n|:---------------|---------:|-------------:|---------:|--------:|----:|-----:|------:|------:|------:|:-----|\n|race_year_id    |         0|          1.00|  26678.70| 20156.18| 2320|  8670|  21795|  40621|  72496|▇▃▃▂▂ |\n|rank            |     17791|          0.87|    253.56|   390.80|    1|    31|     87|    235|   1962|▇▁▁▁▁ |\n|age             |         0|          1.00|     46.25|    10.11|    0|    40|     46|     53|    133|▁▇▂▁▁ |\n|time_in_seconds |     17791|          0.87| 122358.26| 37234.38| 3600| 96566| 114167| 148020| 296806|▁▇▆▁▁ |\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}